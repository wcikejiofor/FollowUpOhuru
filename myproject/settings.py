"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from django.conf import settings
from google_auth_oauthlib.flow import Flow
from django.shortcuts import redirect
from django.http import HttpResponse
from googleapiclient.discovery import build
import dj_database_url
from dotenv import load_dotenv

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Load environment variables

from scheduler.sms_sender import send_sms

def get_user_model():
    from django.apps import apps
    return apps.get_model('scheduler', 'UserProfile')

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# Use environment variables for all sensitive information
SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG') == 'True'
# Near the top of the file, after loading environment variables# Add this near the top of settings.py, after your imports
# Add this near the top of settings.py, after your imports
import logging

logger = logging.getLogger(__name__)

import os
import json
import tempfile

# Check if the Google client secrets are in an environment variable
google_client_secrets = os.environ.get('GOOGLE_CLIENT_SECRETS')

if google_client_secrets:
    # Create a temporary file with the client secrets
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as temp_file:
        temp_file.write(google_client_secrets)
        GOOGLE_CLIENT_SECRETS_FILE = temp_file.name
else:
    # Fallback to a default path or raise an error
    GOOGLE_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'config', 'client_secrets.json')

    # Optional: Add logging to help diagnose the issue
    logger.error(
        f"No GOOGLE_CLIENT_SECRETS found in environment. Falling back to {GOOGLE_CLIENT_SECRETS_FILE}")

# Then right after your ALLOWED_HOSTS definition
# Near the top of your settings.py
ALLOWED_HOSTS = ['*']  # Let our middleware handle the host checking

# Add these after your ALLOWED_HOSTS setting
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

logger.info(f"ALLOWED_HOSTS is set to: {ALLOWED_HOSTS}")
logger.error(f"Current ALLOWED_HOSTS: {ALLOWED_HOSTS}")  # Using error level to make sure it shows up in Render logs

# Update CSRF_TRUSTED_ORIGINS to include your new domain
CSRF_TRUSTED_ORIGINS = [
    'https://b54f-2600-4040-4651-e600-ad65-4f90-1b03-b82d.ngrok-free.app',
    'http://localhost:8000',
    'https://checkout.chiresearchai.com',
    'https://followupohuru.onrender.com'
]

# Twilio Settings
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

# Stripe configuration
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET')

# OpenAI Settings
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Database configuration
DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
}

# Base URL
BASE_URL = os.getenv('BASE_URL', 'https://checkout.chiresearchai.com')

# Google OAuth configuration
GOOGLE_CLIENT_SECRETS_FILE = os.getenv('GOOGLE_CLIENT_SECRETS_FILE')
GOOGLE_CREDENTIALS_PATH = os.getenv('GOOGLE_CREDENTIALS_PATH')

# OAuth2 settings
OAUTH2_PROVIDER = {
    'SCOPES': {
        'calendar': 'Access to Google Calendar'
    },
}

APPEND_SLASH = False

# Redirect URI
OAUTH2_REDIRECT_URI = 'https://checkout.chiresearchai.com/oauth2callback/'


def authorize_google(request, user_id):
    """Handle Google OAuth authorization"""
    try:
        import os
        import logging

        logger = logging.getLogger(__name__)

        # Log all environment variables related to Google OAuth
        logger.error(f"User ID: {user_id}")
        logger.error(f"BASE_DIR: {BASE_DIR}")
        logger.error(f"GOOGLE_CLIENT_SECRETS_FILE: {GOOGLE_CLIENT_SECRETS_FILE}")
        logger.error(f"GOOGLE_SECRETS env var: {os.environ.get('GOOGLE_SECRETS')}")

        # Validate client secrets file
        if not GOOGLE_CLIENT_SECRETS_FILE:
            logger.error("No client secrets file available")
            return HttpResponse("Google OAuth configuration error", status=500)

        # Retrieve user profile
        try:
            user_profile = UserProfile.objects.get(id=user_id)
        except UserProfile.DoesNotExist:
            logger.error(f"No user profile found for ID: {user_id}")
            return HttpResponse(f"User profile not found for ID {user_id}", status=404)

        # Create OAuth flow
        flow = Flow.from_client_secrets_file(
            GOOGLE_CLIENT_SECRETS_FILE,
            scopes=['https://www.googleapis.com/auth/calendar'],
            redirect_uri=settings.OAUTH2_REDIRECT_URI,
            state=str(user_id)
        )

        # Generate authorization URL
        authorization_url, state = flow.authorization_url(
            access_type='offline',
            prompt='consent'
        )

        logger.error(f"Authorization URL generated: {authorization_url}")

        return redirect(authorization_url)

    except Exception as e:
        # Comprehensive error logging
        logger.error(f"Authorization error: {e}", exc_info=True)

        # Attempt to send error SMS if possible
        try:
            user_profile = UserProfile.objects.get(id=user_id)
            send_sms(user_profile.phone_number,
                     f"Authentication setup failed. Error: {str(e)}")
        except:
            pass

        return HttpResponse(f"Authentication error: {e}", status=500)


import os
import tempfile
import json


def get_google_client_secrets():
    import os
    import json
    import tempfile
    import logging

    logger = logging.getLogger(__name__)

    # Check environment variable first
    client_secrets_content = os.environ.get('GOOGLE_CLIENT_SECRETS')

    if client_secrets_content:
        try:
            # Validate JSON
            json_data = json.loads(client_secrets_content)

            # Additional validation for Google client secrets structure
            if 'web' not in json_data:
                logger.error("Invalid Google client secrets: 'web' key missing")
                return None

            # Create a temporary file
            with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as temp_file:
                json.dump(json_data, temp_file)
                logger.info(f"Created temporary client secrets file: {temp_file.name}")
                return temp_file.name

        except json.JSONDecodeError:
            logger.error("Invalid JSON in GOOGLE_CLIENT_SECRETS environment variable")
            return None
        except Exception as e:
            logger.error(f"Error processing GOOGLE_CLIENT_SECRETS: {e}")
            return None

    # Fallback paths
    possible_paths = [
        os.path.join(BASE_DIR, 'client_secrets.json'),
        os.path.join(BASE_DIR, 'config', 'client_secrets.json'),
        os.path.join(BASE_DIR, 'secrets', 'client_secrets.json'),
        os.path.join(BASE_DIR, 'credentials', 'client_secrets.json')
    ]

    for path in possible_paths:
        try:
            if os.path.exists(path):
                # Validate JSON file contents
                with open(path, 'r') as f:
                    json_data = json.load(f)
                    if 'web' not in json_data:
                        logger.error(f"Invalid client secrets at {path}: 'web' key missing")
                        continue

                logger.info(f"Found valid client secrets at {path}")
                return path
        except json.JSONDecodeError:
            logger.error(f"Invalid JSON in {path}")
        except Exception as e:
            logger.error(f"Error reading {path}: {e}")

    logger.error("No valid Google client secrets file found")
    return None


# Set the client secrets file path
GOOGLE_CLIENT_SECRETS_FILE = get_google_client_secrets()

# Validate and log
if not GOOGLE_CLIENT_SECRETS_FILE:
    logger.error("CRITICAL: No valid Google Client Secrets file found!")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# For ngrok/development, add this
CSRF_TRUSTED_ORIGINS = [
    'https://b54f-2600-4040-4651-e600-ad65-4f90-1b03-b82d.ngrok-free.app',
    'http://localhost:8000'
]

# Disable SSL redirect for local development
SECURE_SSL_REDIRECT = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'scheduler',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Move this back to top
    'scheduler.middleware.CustomCommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

import os
import logging

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'scheduler': {  # Replace with your app name
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add these to your settings.py if not already present
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours in seconds

import dj_database_url
import os

# Database configuration
DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Static files configuration
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Additional security settings
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# At the bottom of settings.py
try:
    from .local_settings import *
except ImportError:
    pass
